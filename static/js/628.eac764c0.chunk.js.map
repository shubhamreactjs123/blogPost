{"version":3,"file":"static/js/628.eac764c0.chunk.js","mappings":"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","sources":["components/BlogPostItem.js","components/CustomPagination.js","modules/BlogPostList.js","services/BlogPostAPI.js","BaseUrl.js","utils/blogPostUtils.js"],"sourcesContent":["import { IconButton, TableCell, TableRow, Tooltip } from '@mui/material'\r\nimport VisibilityRoundedIcon from '@mui/icons-material/VisibilityRounded';\r\nimport React from 'react'\r\nimport { convertDate } from '../utils/blogPostUtils'\r\nimport { useNavigate } from 'react-router-dom';\r\n\r\nconst BlogPostItem = ({ blogPostItem, index, currentPage, itemPerPage }) => {\r\n  let pulishedDate = convertDate(blogPostItem.publishedAt);\r\n  const navigate = useNavigate();\r\n  const handleViewDetails = () => {\r\n    localStorage.setItem('blogPostItem', JSON.stringify(blogPostItem))\r\n    navigate(`post/${index}`)\r\n  }\r\n  return (\r\n    <TableRow hover>\r\n      <TableCell variant='body'>{itemPerPage * (currentPage - 1) + index + 1}</TableCell>\r\n      <TableCell variant='body'>{blogPostItem.author}</TableCell>\r\n      <TableCell variant='body'>{blogPostItem.title}</TableCell>\r\n      <TableCell variant='body'>{pulishedDate}</TableCell>\r\n      <TableCell variant='body'>\r\n        <Tooltip title=\"View details\">\r\n          <IconButton \r\n          onClick={handleViewDetails}\r\n          >\r\n            <VisibilityRoundedIcon />\r\n          </IconButton>\r\n        </Tooltip>\r\n      </TableCell>\r\n    </TableRow>\r\n  )\r\n}\r\n\r\nexport default BlogPostItem\r\n","import { Pagination } from '@mui/material'\r\nimport React from 'react'\r\n\r\nconst CustomPagination = ({\r\n    dataLength,\r\n    currentPage,\r\n    onPageChange,\r\n    perPageData\r\n}) => {\r\n    const pages = Math.ceil(dataLength / perPageData)\r\n    const handleChange = (event, page) => {\r\n        onPageChange(page)\r\n    }\r\n    return (\r\n        <div style={{\r\n            display: \"flex\",\r\n            justifyContent: \"end\",\r\n            width: \"100%\"\r\n        }}>\r\n            <Pagination\r\n                count={+pages}\r\n                defaultPage={1}\r\n                page={+currentPage}\r\n                siblingCount={1}\r\n                onChange={handleChange}\r\n            />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default CustomPagination\r\n","import {\r\n    Box,\r\n    Container,\r\n    Paper,\r\n    Table,\r\n    TableBody,\r\n    TableCell,\r\n    TableContainer,\r\n    TableHead,\r\n    TableRow,\r\n    Typography\r\n} from '@mui/material'\r\nimport React, { useEffect, useState } from 'react'\r\nimport { getListOfBlogPost } from '../services/BlogPostAPI';\r\nimport BlogPostItem from '../components/BlogPostItem';\r\nimport CustomPagination from '../components/CustomPagination';\r\n\r\nconst BlogPostList = () => {\r\n    const [blogPostData, setBlogPostData] = useState([]);\r\n    const [currentPage, setCurrentPage] = useState(1);\r\n    const [perPageItem] = useState(10);\r\n    const [paginatedData, setpaginatedData] = useState([])\r\n    const getList = () => {\r\n        getListOfBlogPost(\r\n            (respo) => {\r\n                let cleanData = respo.data.articles.filter(item => item.author !== null)\r\n                setBlogPostData(cleanData)\r\n            },\r\n            (err) => console.log(err)\r\n        )\r\n    }\r\n    useEffect(() => {\r\n        getList()\r\n    }, [])\r\n    useEffect(() => {\r\n        if (blogPostData.length > 0) {\r\n            const startIndex = (currentPage - 1) * perPageItem;\r\n            const endIndex = startIndex + perPageItem;\r\n            console.log(startIndex, endIndex, blogPostData)\r\n            setpaginatedData(blogPostData.slice(startIndex, endIndex));\r\n        }\r\n\r\n    }, [currentPage, perPageItem, blogPostData])\r\n    return (\r\n        <div>\r\n            <Container sx={{ py: 2 }}>\r\n                <Typography variant='h4' mb={2}>Blog Posts</Typography>\r\n                <TableContainer sx={{ mb: 2 }} component={Paper}>\r\n                    <Table\r\n                        stickyHeader={true}\r\n                        size='small' >\r\n                        <TableHead>\r\n                            <TableRow>\r\n                                <TableCell variant='head'>#</TableCell>\r\n                                <TableCell variant='head'>Expert</TableCell>\r\n                                <TableCell variant='head'>Title</TableCell>\r\n                                <TableCell variant='head'>Published Date</TableCell>\r\n                                <TableCell variant='head'>Action</TableCell>\r\n                            </TableRow>\r\n                        </TableHead>\r\n                        <TableBody>\r\n                            {\r\n                                paginatedData.map((item, index) => {\r\n                                    return (\r\n                                        <BlogPostItem\r\n                                            blogPostItem={item}\r\n                                            index={index}\r\n                                            currentPage={currentPage}\r\n                                            itemPerPage={perPageItem}\r\n                                            key={index}\r\n                                        />\r\n                                    )\r\n                                })\r\n                            }\r\n                        </TableBody>\r\n                    </Table>\r\n                    {\r\n                        blogPostData.length > 0 &&\r\n                        <Box sx={{ p: 2 }}>\r\n                            <CustomPagination\r\n                                dataLength={blogPostData.length}\r\n                                currentPage={currentPage}\r\n                                onPageChange={setCurrentPage}\r\n                                perPageData={perPageItem}\r\n                            />\r\n                        </Box>\r\n                    }\r\n                </TableContainer>\r\n\r\n            </Container >\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default BlogPostList\r\n","import { baseUrl } from \"../BaseUrl\"\r\nimport axios from 'axios'\r\n\r\nexport const getListOfBlogPost = (\r\n    successHandler,\r\n    errorHandler\r\n) => {\r\n    let api = `${baseUrl}everything?q=apple&from=2024-07-17&to=2024-07-17&sortBy=popularity&apiKey=20adeccdd40b49f6bcef9d1a124c6886`;\r\n\r\n    axios.get(api).then((respo) => successHandler(respo)).catch((err) => errorHandler(err))\r\n}","export const baseUrl = 'https://newsapi.org/v2/'","export const convertDate = (date) => {\r\n    const dateModified = new Date(date);\r\n    const months = [\r\n        'Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun',\r\n        'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'\r\n    ];\r\n    const day = dateModified?.getDate();\r\n    const monthAbbreviation = months[dateModified?.getMonth()];\r\n    const year = dateModified?.getFullYear();\r\n    return `${day}-${monthAbbreviation}-${year}`;\r\n}\r\n"],"names":["_ref","blogPostItem","index","currentPage","itemPerPage","pulishedDate","convertDate","publishedAt","navigate","useNavigate","_jsxs","TableRow","hover","children","_jsx","TableCell","variant","author","title","Tooltip","IconButton","onClick","handleViewDetails","localStorage","setItem","JSON","stringify","concat","VisibilityRoundedIcon","dataLength","onPageChange","perPageData","pages","Math","ceil","style","display","justifyContent","width","Pagination","count","defaultPage","page","siblingCount","onChange","handleChange","event","BlogPostList","blogPostData","setBlogPostData","useState","setCurrentPage","perPageItem","paginatedData","setpaginatedData","getList","getListOfBlogPost","successHandler","errorHandler","api","axios","get","then","respo","catch","err","cleanData","data","articles","filter","item","console","log","useEffect","length","startIndex","endIndex","slice","Container","sx","py","Typography","mb","TableContainer","component","Paper","Table","stickyHeader","size","TableHead","TableBody","map","BlogPostItem","Box","p","CustomPagination","date","dateModified","Date","day","getDate","monthAbbreviation","getMonth","year","getFullYear"],"sourceRoot":""}